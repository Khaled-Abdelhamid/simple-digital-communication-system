function output = decoder(enc_out, bit_duration, fs)



output=[];
ts=1/fs;
no_points_per_bit=ts/bit_duration;%to get the nember of bits needed to represent each sample
%if it was odd number then we should increase it by one so that manchester
%encodeing could work


switch type
    case 'Unipolar NRZ'
        
        for i=1:length(enc_out)/(no_points_per_bit)
           if enc_out((i-1)*no_points_per_bit)>1
               outputs=[output 1];
           else
               outputs=[output 0];
           end
        end
        
        
        
        
    case 'Polar NRZ'
        
        one=ampl*ones(1,no_points_per_bit);
        zero=ampl*-1*ones(1,no_points_per_bit);
        
        for i=1:length(arr)
           if arr(i)==1
               output=[output one];
           else
               output=[output zero];
           end
        end
        
    case 'Manchester'
        
        one=ampl*[ones(1,no_points_per_bit/2), -1*ones(1,no_points_per_bit/2)];
        zero=ampl*[-1*ones(1,no_points_per_bit/2), ones(1,no_points_per_bit/2)];
        
        for i=1:length(arr)
           if arr(i)==1
               output=[output one];
           else
               output=[output zero];
           end
        end
        
    otherwise
        disp ('the ending tpe is undefined please check one of the list below:')
        disp('1-Unipolar NRZ')
        disp('2-Polar NRZ')
        disp('3-Manchester')
end



end